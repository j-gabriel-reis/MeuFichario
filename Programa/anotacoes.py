#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.1
#  in conjunction with Tcl version 8.6
#    May 08, 2021 04:42:28 PM -03  platform: Linux

import sys
from tkinter import Toplevel
from tkinter.constants import ANCHOR, END, FIRST

try:
    import Tkinter as tk # type: ignore
except ImportError:
    import tkinter as tk

try:
    import ttk # type: ignore 
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from persistencia import *
from inserirAnotacao import *
from consultarAnotacao import *

class Toplevel4:
    def __init__(self, matricula, caderno, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#F2E7C4'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#F2E7C4' # X11 color: 'gray85'
        _ana1color = '#F2E7C4' # X11 color: 'gray85'
        _ana2color = '#F2E7C4' # Closest X11 color: 'gray92'

        self.matricula = matricula
        self.caderno = caderno

        self.top = tk.Tk()
        self.top.geometry("813x470+574+198")
        self.top.minsize(1, 1)
        self.top.maxsize(1905, 1050)
        self.top.resizable(1,  1)
        self.top.title("New Toplevel")
        self.top.configure(background='#F2E7C4')

        self.Listbox1 = tk.Listbox(self.top)
        self.Listbox1.place(relx=0.16, rely=0.234, relheight=0.56
                , relwidth=0.673)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(font="-family {gothic} -size 15")

        anotacoes = anotacao(self.matricula, self.caderno)
        minhas_anotacoes = anotacoes.todas_anotacoes()
        lista_anotacoes = [str(item[1]) + " - " + item[2] for item in minhas_anotacoes]
        
        if len(lista_anotacoes) == 0:
            self.Listbox1.insert(END, "Você ainda não possui anotacoes nesse caderno")

        for item in lista_anotacoes:
            self.Listbox1.insert(END, item)
            self.Listbox1.configure(foreground='#205459')

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.098, rely=0.085, height=57, width=283)
        self.Label1.configure(font="-family {gothic} -size 20")
        self.Label1.configure(text=f"{self.caderno}", background="#F2E7C4", foreground='#205459')

        self.Button1 = tk.Button(self.top, command=self.criar_anotacao)
        self.Button1.place(relx=0.16, rely=0.851, height=57, width=132)
        self.Button1.configure(borderwidth="2", background="#F25757", foreground='white')
        self.Button1.configure(text='''Nova anotacao''')

        self.Button5 = tk.Button(self.top, command=self.apaga_caderno)
        self.Button5.place(relx=0.4185, rely=0.851, height=57, width=132)
        self.Button5.configure(borderwidth="2", background="#F25757", foreground='white')
        self.Button5.configure(text='''Apagar Caderno''')

        self.Button2 = tk.Button(self.top, command=lambda: self.acessar_anotacao(minhas_anotacoes)) 
        self.Button2.place(relx=0.677, rely=0.851, height=57, width=132) 
        self.Button2.configure(borderwidth="2", background="#F25757", foreground='white')
        self.Button2.configure(text='''Acessar''')

        self.Button3 = tk.Button(self.top, command=self.atualiza) 
        self.Button3.place(relx=0.5, rely=0.1, height=57, width=132) 
        self.Button3.configure(borderwidth="2", background="#F25757", foreground='white')
        self.Button3.configure(text='''Recarregar''') 

        self.Button4 = tk.Button(self.top, command=self.volta) 
        self.Button4.place(relx=0.67, rely=0.1, height=57, width=132) 
        self.Button4.configure(borderwidth="2", background="#037F8C", foreground='white')
        self.Button4.configure(text='''Voltar''')

        self.top.mainloop()

    def criar_anotacao(self):
        Toplevel5(self.matricula, self.caderno)

    def acessar_anotacao(self, minhas_anotacoes):
        id_anotacao = minhas_anotacoes[self.Listbox1.index(ANCHOR)][0]
        Toplevel6(id_anotacao, self.matricula, self.caderno)

    def atualiza(self):
        self.top.destroy()
        Toplevel4(self.matricula, self.caderno)

    def apaga_caderno(self):
        caderno(self.matricula).apaga_caderno(self.caderno)
        self.top.destroy()


    def volta(self):
        self.top.destroy()