#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.1
#  in conjunction with Tcl version 8.6
#    May 08, 2021 07:02:01 PM -03  platform: Linux

from persistencia import materia
import sys

try:
    import Tkinter as tk  # type: ignore
except ImportError:
    import tkinter as tk 

try:
    import ttk # type: ignore
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from persistencia import *
from meusCadernos import *

class Toplevel3:
    def __init__(self, matricula, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        self.matricula = matricula

        self.top = tk.Tk()
        self.top.geometry("400x400+790+242")
        self.top.minsize(1, 1)
        self.top.maxsize(1905, 1050)
        self.top.resizable(1,  1)
        self.top.title("New Toplevel")
        self.top.configure(background="#F2E7C4")

        self.menubar = tk.Menu(self.top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        self.top.configure(menu = self.menubar)

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.25, rely=0.1, height=55, width=209)
        self.Label1.configure(background="#F2E7C4")
        self.Label1.configure(font="-family {gothic} -size 20")
        self.Label1.configure(foreground="#205459")
        self.Label1.configure(text='''Novo Caderno''')

        self.Label1_1 = tk.Label(self.top)
        self.Label1_1.place(relx=0.25, rely=0.325, height=55, width=209)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(background="#F2E7C4")
        self.Label1_1.configure(font="-family {gothic} -size 15")
        self.Label1_1.configure(foreground="#205459")
        self.Label1_1.configure(text='''Nome do caderno''')

        self.Label1_1_1 = tk.Label(self.top)
        self.Label1_1_1.place(relx=0.25, rely=0.525, height=55, width=209)
        self.Label1_1_1.configure(activebackground="#f9f9f9")
        self.Label1_1_1.configure(background="#F2E7C4")
        self.Label1_1_1.configure(font="-family {gothic} -size 15")
        self.Label1_1_1.configure(foreground="#205459")
        self.Label1_1_1.configure(text='''Mat√©ria''')

        dicionario_materias = materia().todas_materias()
        dicionario_materias = {item[1]:item[0] for item in dicionario_materias}

        lista_materias = list(dicionario_materias.keys())

        self.TCombobox1 = ttk.Combobox(self.top, values=lista_materias)
        self.TCombobox1.place(relx=0.275, rely=0.65, relheight=0.063
                , relwidth=0.443)
        self.TCombobox1.configure(textvariable="novo caderno_support.combobox")
        self.TCombobox1.configure(takefocus="")

        self.Button1 = tk.Button(self.top, command=lambda: self.cria_caderno(dicionario_materias))
        self.Button1.place(relx=0.4, rely=0.825, height=37, width=92)
        self.Button1.configure(background="#F25757")
        self.Button1.configure(borderwidth="2")
        self.Button1.configure(font="-family {gothic} -size 15")
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(relief="flat")
        self.Button1.configure(text='''Criar''')

        self.Entry1 = tk.Entry(self.top)
        self.Entry1.place(relx=0.275, rely=0.45, height=27, relwidth=0.44)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")

        self.TSeparator1 = ttk.Separator(self.top)
        self.TSeparator1.place(relx=0.25, rely=0.275,  relwidth=0.5)

        self.top.mainloop()
    
    def cria_caderno(self, dicionario_materias):
        n_materia = self.TCombobox1.get()
        id_materia = dicionario_materias.get(n_materia)
        caderno(self.matricula).cria_caderno(self.Entry1.get(), id_materia)
        self.top.destroy()





